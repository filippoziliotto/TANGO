# @package _global_

defaults:
  - /habitat: habitat_config_base
  - /habitat/task: task_config_base
  - /habitat/task/actions:
    - stop
    - move_forward
    - turn_left
    - turn_right
    - look_up
    - look_down
  - /habitat/task/measurements:
    - num_steps
    - distance_to_goal
    - success
    - spl
    - soft_spl
    - distance_to_goal_reward
    # - top_down_map
  - /habitat/task/lab_sensors:
    - pointgoal_with_gps_compass_sensor
    - compass_sensor
    - gps_sensor
    - heading_sensor
    - instance_imagegoal_sensor
    - instance_imagegoal_hfov_sensor
    
  - /habitat/dataset: dataset_config_schema
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /habitat/simulator/sensor_setups@habitat.simulator.agents.main_agent: rgbd_agent
  - /habitat_baselines/rl/policy/obs_transforms@habitat_baselines.rl.policy.main_agent.obs_transforms.resize_shortest_edge: resize_shortest_edge_base
  - /habitat_baselines/rl/policy/obs_transforms@habitat_baselines.rl.policy.main_agent.obs_transforms.center_cropper: center_cropper_base
  - _self_

habitat:
  seed: 100
  dataset:
    type: Goat-v1-single
    split: val_unseen
    data_path: data/datasets/goat_bench/hm3d/v1/{split}/{split}.json.gz
    scenes_dir: "data/scene_datasets/"

  task:
    type: Goat-v1
    success_measure: success
    reward_measure: distance_to_goal_reward

    measurements:
      distance_to_goal:
        type: DistanceToGoal
        distance_to: "VIEW_POINTS"
      spl:
        type: SPL
      soft_spl:
        type: SoftSPL
      success:
        type: Success
        success_distance: 0.3

    # In the case look up/down actions are used
    actions:
      look_up:
        tilt_angle: 20
      look_down:
        tilt_angle: 20

  environment:
    max_episode_steps: 50 # 5000 for one GOAT episode (with 10 subtasks)
    iterator_options:
      cycle: False
      shuffle: False
      group_by_scene: True
      num_episode_sample: -1
      max_scene_repeat_episodes: -1

  simulator:
    # type: GOATSim-v0
    turn_angle: 20
    # tilt_angle: 20
    # action_space_config: "v2-goat"
    agents:
      main_agent:
        sim_sensors:
          rgb_sensor:
            width: 256
            height: 256
            hfov: 90
            position: [0, 1.2, 0]
          depth_sensor:
            width: 256
            height: 256
            hfov: 90
            position: [0, 1.2, 0]
        radius: 0.18
        height: 1.41
    habitat_sim_v0:
      gpu_device_id: 0

habitat_baselines:
  torch_gpu_id: 0
  task_name: goat
  # Visualization settings
  # tensorboard_dir: tb
  video_dir: video_dir/goat/
  # writer_type: wb # to deactivate just comment this
  wb:
    entity: ziliottofilippodev
    project_name: NavProg
    run_name: zs_goat_prova
  save_obs:
    save_to_disk: True
  sampling_strategy: "unreachable"

  # Object Detector settings
  object_detector:
    use_detector: True
    type: "owl-vit"
    size: "base"
    thresh: 0.3
    nms_thresh: 0.5
    store_detections: False
    use_detection_cls: True
    # Additional object detector settings
    use_additional_detector: True
    additional_type: "detr"
    additional_size: "resnet50"
    additional_thresh: 0.9
    additional_nms_thresh: 0.5

  # Feature Matcher settings
  feature_matcher:
    use_matcher: True
    threshold: 30

  # Value Mapper settings
  value_mapper:
    use_value_mapper: True
    type: "blip"
    size: "base"
    visualize: True
    save_video: False
    policy: "v1"
    exploration_threshold: 0.2
    min_obstacle_height: 0.3
    max_obstacle_height: 0.88
    use_max_confidence: False
    map_size: 1000
    pixels_per_meter: 20
    save_image_embed: True

  # Eval settings
  # Distance detection threshold (when the agent should call stop action)
  # This value is then added to the agent radius (e.g. 0.5 + 0.18 )
  object_distance_threshold: .4
  test_episode_count: 10
  eval_ckpt_path_dir: "data/new_checkpoints/pointnav/hm3d-depth/"
  num_environments: 1
  checkpoint_folder: "data/new_checkpoints/pointnav/hm3d-depth/"
  trainer_name: ddppo
  num_updates: -1
  total_num_steps: 2.5e9
  log_interval: 10
  num_checkpoints: 100
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  evaluate: True
  load_resume_state_config: False
  verbose: False
  eval_keys_to_include_in_name: [ "num_steps", "distance_to_goal"]

  eval:
    split: val_unseen
    should_load_ckpt: False
    use_ckpt_config: False
    # video_option: [ "disk" ]

  rl:
    policy:
      main_agent:
        name: PointNavResNetPolicy
        obs_transforms:
          resize_shortest_edge:
            trans_keys: [rgb, depth]

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 2
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 128
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50
      use_normalized_advantage: False
      hidden_size: 512
      # Use double buffered sampling, typically helps
      # when environment time is similar or large than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      # pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      pretrained_weights: data/ddppo-models/hm3d-depth/ckpt_60.pth
      # Initialize with pretrained weights
      pretrained: True
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: True
      # Whether the visual encoder backbone will be trained.
      train_encoder: False
      # Whether to reset the critic linear layer
      reset_critic: False

      # Model parameters
      backbone: resnet50
      rnn_type: LSTM
      num_recurrent_layers: 2